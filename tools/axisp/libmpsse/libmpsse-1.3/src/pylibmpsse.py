# This file was automatically generated by SWIG (https://www.swig.org).
# Version 4.1.1
#
# Do not make changes to this file unless you know what you are doing - modify
# the SWIG interface file instead.

from sys import version_info as _swig_python_version_info
# Import the low-level C/C++ module
if __package__ or "." in __name__:
    from . import _pylibmpsse
else:
    import _pylibmpsse

try:
    import builtins as __builtin__
except ImportError:
    import __builtin__

def _swig_repr(self):
    try:
        strthis = "proxy of " + self.this.__repr__()
    except __builtin__.Exception:
        strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)


def _swig_setattr_nondynamic_instance_variable(set):
    def set_instance_attr(self, name, value):
        if name == "this":
            set(self, name, value)
        elif name == "thisown":
            self.this.own(value)
        elif hasattr(self, name) and isinstance(getattr(type(self), name), property):
            set(self, name, value)
        else:
            raise AttributeError("You cannot add instance attributes to %s" % self)
    return set_instance_attr


def _swig_setattr_nondynamic_class_variable(set):
    def set_class_attr(cls, name, value):
        if hasattr(cls, name) and not isinstance(getattr(cls, name), property):
            set(cls, name, value)
        else:
            raise AttributeError("You cannot add class attributes to %s" % cls)
    return set_class_attr


def _swig_add_metaclass(metaclass):
    """Class decorator for adding a metaclass to a SWIG wrapped class - a slimmed down version of six.add_metaclass"""
    def wrapper(cls):
        return metaclass(cls.__name__, cls.__bases__, cls.__dict__.copy())
    return wrapper


class _SwigNonDynamicMeta(type):
    """Meta class to enforce nondynamic attributes (no new attributes) for a class"""
    __setattr__ = _swig_setattr_nondynamic_class_variable(type.__setattr__)


MPSSE_OK = _pylibmpsse.MPSSE_OK
MPSSE_FAIL = _pylibmpsse.MPSSE_FAIL
MSB = _pylibmpsse.MSB
LSB = _pylibmpsse.LSB
CHUNK_SIZE = _pylibmpsse.CHUNK_SIZE
SPI_RW_SIZE = _pylibmpsse.SPI_RW_SIZE
SPI_TRANSFER_SIZE = _pylibmpsse.SPI_TRANSFER_SIZE
I2C_TRANSFER_SIZE = _pylibmpsse.I2C_TRANSFER_SIZE
LATENCY_MS = _pylibmpsse.LATENCY_MS
TIMEOUT_DIVISOR = _pylibmpsse.TIMEOUT_DIVISOR
USB_TIMEOUT = _pylibmpsse.USB_TIMEOUT
SETUP_DELAY = _pylibmpsse.SETUP_DELAY
BITMODE_RESET = _pylibmpsse.BITMODE_RESET
BITMODE_MPSSE = _pylibmpsse.BITMODE_MPSSE
CMD_SIZE = _pylibmpsse.CMD_SIZE
MAX_SETUP_COMMANDS = _pylibmpsse.MAX_SETUP_COMMANDS
SS_TX_COUNT = _pylibmpsse.SS_TX_COUNT
LOW = _pylibmpsse.LOW
HIGH = _pylibmpsse.HIGH
NUM_GPIOL_PINS = _pylibmpsse.NUM_GPIOL_PINS
NUM_GPIO_PINS = _pylibmpsse.NUM_GPIO_PINS
NULL_CONTEXT_ERROR_MSG = _pylibmpsse.NULL_CONTEXT_ERROR_MSG
IFACE_ANY = _pylibmpsse.IFACE_ANY
IFACE_A = _pylibmpsse.IFACE_A
IFACE_B = _pylibmpsse.IFACE_B
IFACE_C = _pylibmpsse.IFACE_C
IFACE_D = _pylibmpsse.IFACE_D
ONE_HUNDRED_KHZ = _pylibmpsse.ONE_HUNDRED_KHZ
FOUR_HUNDRED_KHZ = _pylibmpsse.FOUR_HUNDRED_KHZ
ONE_MHZ = _pylibmpsse.ONE_MHZ
TWO_MHZ = _pylibmpsse.TWO_MHZ
FIVE_MHZ = _pylibmpsse.FIVE_MHZ
SIX_MHZ = _pylibmpsse.SIX_MHZ
TEN_MHZ = _pylibmpsse.TEN_MHZ
TWELVE_MHZ = _pylibmpsse.TWELVE_MHZ
FIFTEEN_MHZ = _pylibmpsse.FIFTEEN_MHZ
THIRTY_MHZ = _pylibmpsse.THIRTY_MHZ
SIXTY_MHZ = _pylibmpsse.SIXTY_MHZ
SPI0 = _pylibmpsse.SPI0
SPI1 = _pylibmpsse.SPI1
SPI2 = _pylibmpsse.SPI2
SPI3 = _pylibmpsse.SPI3
I2C = _pylibmpsse.I2C
GPIO = _pylibmpsse.GPIO
BITBANG = _pylibmpsse.BITBANG
SK = _pylibmpsse.SK
DO = _pylibmpsse.DO
DI = _pylibmpsse.DI
CS = _pylibmpsse.CS
GPIO0 = _pylibmpsse.GPIO0
GPIO1 = _pylibmpsse.GPIO1
GPIO2 = _pylibmpsse.GPIO2
GPIO3 = _pylibmpsse.GPIO3
GPIOL0 = _pylibmpsse.GPIOL0
GPIOL1 = _pylibmpsse.GPIOL1
GPIOL2 = _pylibmpsse.GPIOL2
GPIOL3 = _pylibmpsse.GPIOL3
GPIOH0 = _pylibmpsse.GPIOH0
GPIOH1 = _pylibmpsse.GPIOH1
GPIOH2 = _pylibmpsse.GPIOH2
GPIOH3 = _pylibmpsse.GPIOH3
GPIOH4 = _pylibmpsse.GPIOH4
GPIOH5 = _pylibmpsse.GPIOH5
GPIOH6 = _pylibmpsse.GPIOH6
GPIOH7 = _pylibmpsse.GPIOH7
ACK = _pylibmpsse.ACK
NACK = _pylibmpsse.NACK
INVALID_COMMAND = _pylibmpsse.INVALID_COMMAND
ENABLE_ADAPTIVE_CLOCK = _pylibmpsse.ENABLE_ADAPTIVE_CLOCK
DISABLE_ADAPTIVE_CLOCK = _pylibmpsse.DISABLE_ADAPTIVE_CLOCK
ENABLE_3_PHASE_CLOCK = _pylibmpsse.ENABLE_3_PHASE_CLOCK
DISABLE_3_PHASE_CLOCK = _pylibmpsse.DISABLE_3_PHASE_CLOCK
TCK_X5 = _pylibmpsse.TCK_X5
TCK_D5 = _pylibmpsse.TCK_D5
CLOCK_N_CYCLES = _pylibmpsse.CLOCK_N_CYCLES
CLOCK_N8_CYCLES = _pylibmpsse.CLOCK_N8_CYCLES
PULSE_CLOCK_IO_HIGH = _pylibmpsse.PULSE_CLOCK_IO_HIGH
PULSE_CLOCK_IO_LOW = _pylibmpsse.PULSE_CLOCK_IO_LOW
CLOCK_N8_CYCLES_IO_HIGH = _pylibmpsse.CLOCK_N8_CYCLES_IO_HIGH
CLOCK_N8_CYCLES_IO_LOW = _pylibmpsse.CLOCK_N8_CYCLES_IO_LOW
TRISTATE_IO = _pylibmpsse.TRISTATE_IO
STARTED = _pylibmpsse.STARTED
STOPPED = _pylibmpsse.STOPPED
class vid_pid(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    vid = property(_pylibmpsse.vid_pid_vid_get, _pylibmpsse.vid_pid_vid_set)
    pid = property(_pylibmpsse.vid_pid_pid_get, _pylibmpsse.vid_pid_pid_set)
    description = property(_pylibmpsse.vid_pid_description_get, _pylibmpsse.vid_pid_description_set)

    def __init__(self):
        _pylibmpsse.vid_pid_swiginit(self, _pylibmpsse.new_vid_pid())
    __swig_destroy__ = _pylibmpsse.delete_vid_pid

# Register vid_pid in _pylibmpsse:
_pylibmpsse.vid_pid_swigregister(vid_pid)
class mpsse_context(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    description = property(_pylibmpsse.mpsse_context_description_get, _pylibmpsse.mpsse_context_description_set)
    ftdi = property(_pylibmpsse.mpsse_context_ftdi_get, _pylibmpsse.mpsse_context_ftdi_set)
    mode = property(_pylibmpsse.mpsse_context_mode_get, _pylibmpsse.mpsse_context_mode_set)
    status = property(_pylibmpsse.mpsse_context_status_get, _pylibmpsse.mpsse_context_status_set)
    flush_after_read = property(_pylibmpsse.mpsse_context_flush_after_read_get, _pylibmpsse.mpsse_context_flush_after_read_set)
    vid = property(_pylibmpsse.mpsse_context_vid_get, _pylibmpsse.mpsse_context_vid_set)
    pid = property(_pylibmpsse.mpsse_context_pid_get, _pylibmpsse.mpsse_context_pid_set)
    clock = property(_pylibmpsse.mpsse_context_clock_get, _pylibmpsse.mpsse_context_clock_set)
    xsize = property(_pylibmpsse.mpsse_context_xsize_get, _pylibmpsse.mpsse_context_xsize_set)
    open = property(_pylibmpsse.mpsse_context_open_get, _pylibmpsse.mpsse_context_open_set)
    endianess = property(_pylibmpsse.mpsse_context_endianess_get, _pylibmpsse.mpsse_context_endianess_set)
    tris = property(_pylibmpsse.mpsse_context_tris_get, _pylibmpsse.mpsse_context_tris_set)
    pstart = property(_pylibmpsse.mpsse_context_pstart_get, _pylibmpsse.mpsse_context_pstart_set)
    pstop = property(_pylibmpsse.mpsse_context_pstop_get, _pylibmpsse.mpsse_context_pstop_set)
    pidle = property(_pylibmpsse.mpsse_context_pidle_get, _pylibmpsse.mpsse_context_pidle_set)
    gpioh = property(_pylibmpsse.mpsse_context_gpioh_get, _pylibmpsse.mpsse_context_gpioh_set)
    trish = property(_pylibmpsse.mpsse_context_trish_get, _pylibmpsse.mpsse_context_trish_set)
    bitbang = property(_pylibmpsse.mpsse_context_bitbang_get, _pylibmpsse.mpsse_context_bitbang_set)
    tx = property(_pylibmpsse.mpsse_context_tx_get, _pylibmpsse.mpsse_context_tx_set)
    rx = property(_pylibmpsse.mpsse_context_rx_get, _pylibmpsse.mpsse_context_rx_set)
    txrx = property(_pylibmpsse.mpsse_context_txrx_get, _pylibmpsse.mpsse_context_txrx_set)
    tack = property(_pylibmpsse.mpsse_context_tack_get, _pylibmpsse.mpsse_context_tack_set)
    rack = property(_pylibmpsse.mpsse_context_rack_get, _pylibmpsse.mpsse_context_rack_set)

    def __init__(self):
        _pylibmpsse.mpsse_context_swiginit(self, _pylibmpsse.new_mpsse_context())
    __swig_destroy__ = _pylibmpsse.delete_mpsse_context

# Register mpsse_context in _pylibmpsse:
_pylibmpsse.mpsse_context_swigregister(mpsse_context)

def MPSSE(mode, freq, endianess):
    return _pylibmpsse.MPSSE(mode, freq, endianess)

def Open(vid, pid, mode, freq, endianess, interface, description, serial):
    return _pylibmpsse.Open(vid, pid, mode, freq, endianess, interface, description, serial)

def OpenIndex(vid, pid, mode, freq, endianess, interface, description, serial, index):
    return _pylibmpsse.OpenIndex(vid, pid, mode, freq, endianess, interface, description, serial, index)

def Close(mpsse):
    return _pylibmpsse.Close(mpsse)

def ErrorString(mpsse):
    return _pylibmpsse.ErrorString(mpsse)

def SetMode(mpsse, endianess):
    return _pylibmpsse.SetMode(mpsse, endianess)

def EnableBitmode(mpsse, tf):
    return _pylibmpsse.EnableBitmode(mpsse, tf)

def SetClock(mpsse, freq):
    return _pylibmpsse.SetClock(mpsse, freq)

def GetClock(mpsse):
    return _pylibmpsse.GetClock(mpsse)

def GetVid(mpsse):
    return _pylibmpsse.GetVid(mpsse)

def GetPid(mpsse):
    return _pylibmpsse.GetPid(mpsse)

def GetDescription(mpsse):
    return _pylibmpsse.GetDescription(mpsse)

def SetLoopback(mpsse, enable):
    return _pylibmpsse.SetLoopback(mpsse, enable)

def SetCSIdle(mpsse, idle):
    return _pylibmpsse.SetCSIdle(mpsse, idle)

def Start(mpsse):
    return _pylibmpsse.Start(mpsse)

def Write(mpsse, data):
    return _pylibmpsse.Write(mpsse, data)

def Stop(mpsse):
    return _pylibmpsse.Stop(mpsse)

def GetAck(mpsse):
    return _pylibmpsse.GetAck(mpsse)

def SetAck(mpsse, ack):
    return _pylibmpsse.SetAck(mpsse, ack)

def SendAcks(mpsse):
    return _pylibmpsse.SendAcks(mpsse)

def SendNacks(mpsse):
    return _pylibmpsse.SendNacks(mpsse)

def FlushAfterRead(mpsse, tf):
    return _pylibmpsse.FlushAfterRead(mpsse, tf)

def PinHigh(mpsse, pin):
    return _pylibmpsse.PinHigh(mpsse, pin)

def PinLow(mpsse, pin):
    return _pylibmpsse.PinLow(mpsse, pin)

def SetDirection(mpsse, direction):
    return _pylibmpsse.SetDirection(mpsse, direction)

def WriteBits(mpsse, bits, size):
    return _pylibmpsse.WriteBits(mpsse, bits, size)

def ReadBits(mpsse, size):
    return _pylibmpsse.ReadBits(mpsse, size)

def WritePins(mpsse, data):
    return _pylibmpsse.WritePins(mpsse, data)

def ReadPins(mpsse):
    return _pylibmpsse.ReadPins(mpsse)

def PinState(mpsse, pin, state):
    return _pylibmpsse.PinState(mpsse, pin, state)

def Tristate(mpsse):
    return _pylibmpsse.Tristate(mpsse)

def Version():
    return _pylibmpsse.Version()
class swig_string_data(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    size = property(_pylibmpsse.swig_string_data_size_get, _pylibmpsse.swig_string_data_size_set)
    data = property(_pylibmpsse.swig_string_data_data_get, _pylibmpsse.swig_string_data_data_set)

    def __init__(self):
        _pylibmpsse.swig_string_data_swiginit(self, _pylibmpsse.new_swig_string_data())
    __swig_destroy__ = _pylibmpsse.delete_swig_string_data

# Register swig_string_data in _pylibmpsse:
_pylibmpsse.swig_string_data_swigregister(swig_string_data)

def Read(mpsse, size):
    return _pylibmpsse.Read(mpsse, size)

def Transfer(mpsse, data):
    return _pylibmpsse.Transfer(mpsse, data)

